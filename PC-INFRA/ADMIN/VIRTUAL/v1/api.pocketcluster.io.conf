# --- Re-direction --- #

## Redirect all non-encrypted to encrypted
server {
    server_name               api.pocketcluster.io;
    listen                    *:80;
    #listen                   [::]:80;

    return                    301 https://api.pocketcluster.io$request_uri;
}

# --- Main Service --- #

upstream api_service {
    server 127.0.0.1:8080;
    keepalive 300;
}

server {
    # https://serverfault.com/questions/660243/nginx-how-to-set-limit-conn-and-limit-req
    # zone which we want to limit by upper values, we want limit whole server
    limit_req                 zone=req_limit_per_ip burst=10 nodelay;
    limit_conn                conn_limit_per_ip 20;

    # General
    server_name               api.pocketcluster.io;
    listen                    *:443 ssl http2;
    #listen                   [::]:443 ssl http2;

    # HTTP Strict Transport Security (31536000 seconds = 1 year)
    # https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/
    # https://www.troyhunt.com/understanding-http-strict-transport/
    add_header                Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # config to don't allow the browser to render the page inside an frame or iframe
    # for news, this might cause an issue
    add_header                X-Frame-Options DENY;

    # disable content-type sniffing on some browsers.
    add_header                X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    add_header                X-XSS-Protection "1; mode=block";

    #tell the browser that it can only download content from the domains you explicitly allow
#   add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";


    # SSL configurations
    ssl                       on;
    ssl_protocols             TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers              'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_session_tickets       off;
    ssl_certificate           /etc/letsencrypt/live/pocketcluster.io/fullchain.pem;
    ssl_certificate_key       /etc/letsencrypt/live/pocketcluster.io/privkey.pem;

    # enable session resumption to improve https performance
    # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
    ssl_session_cache         shared:SSL:50m;
    ssl_session_timeout       5m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam               /etc/nginx/ssl.crt/dhparams.pem;

    # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    ssl_stapling              on;
    ssl_stapling_verify       on;
    ssl_trusted_certificate   /etc/letsencrypt/live/pocketcluster.io/fullchain.pem;
    resolver                  8.8.8.8 8.8.4.4;

    location ^~ /service/ {

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
        proxy_set_header CF-Ipcountry $http_cf_ipcountry;
        proxy_set_header CF-Ray $http_cf_ray;
        proxy_set_header Cf-Visitor $http_cf_visitor;

        # to upstream proxy
        proxy_pass http://api_service;

        # for http keep alive (http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive)
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    location / {
        return 404;
    }
}

# server {
#     listen 80 default_server;
#     #listen [::]:80 default_server;
# 
#     location ^~ /healthcheck {
# 
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
#         proxy_set_header CF-Ipcountry $http_cf_ipcountry;
#         proxy_set_header CF-Ray $http_cf_ray;
#         proxy_set_header Cf-Visitor $http_cf_visitor;
# 
#         # to upstream proxy
#         proxy_pass http://api_service;
# 
#         # for http keep alive (http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive)
#         proxy_http_version 1.1;
#         proxy_set_header Connection "";
#     }
# 
#     location / {
#         return 404;
#     }
# }
